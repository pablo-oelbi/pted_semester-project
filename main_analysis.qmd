---
title: "Posmo Analysis"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(tidyr)
library(sf)
library(sp)
library(tmap)
library(tmaptools)
library(geosphere)
library(purrr)
library(cowplot)
library(rnaturalearth)
library(rnaturalearthdata)
```



# Load Data and some functions
```{r}
# Function to get trips for a single user
get_trips <- function(df) {
  df <- df %>%
    arrange(datetime) %>%  # Sort data by datetime
    mutate(time_diff = c(0, difftime(datetime[-1], datetime[-n()], units = "mins"))) %>%  # Calculate time difference between records
    mutate(trip_id = cumsum(transport_mode != lag(transport_mode, default = transport_mode[1]) | time_diff > 15)) %>%  # Identify individual trips
    mutate(next_transport_mode_tmp = lead(transport_mode, default = NA),
           last_transport_mode_tmp = lag(transport_mode, default = NA)) %>% 
    group_by(trip_id) %>%
    mutate(next_transport_mode = last(next_transport_mode_tmp),
           last_transport_mode = first(last_transport_mode_tmp)) 
  df$next_transport_mode_tmp <- NULL
  df$last_transport_mode_tmp <- NULL
  return(df)
}

# Function to calculate distances for one user
calculate_distances <- function(data) {
  # Convert the data to sf object for spatial operations
  coordinates <- st_as_sf(data, coords = c("lon_x", "lat_y"), crs = 4326)
  coordinates_matrix <- st_coordinates(coordinates)
  distances <- c(0, distVincentySphere(coordinates_matrix[-1, ], coordinates_matrix[-nrow(data), ]))
  data$distance <- distances
  
  # Calculate cumulative distance and time for each trip
  data <- data %>%
    arrange(trip_id, datetime) %>%
    group_by(trip_id) %>%
    mutate(
      cumulative_distance =cumsum(distance),
      cumulative_time = cumsum(time_diff),
      elapsed_time = sum(time_diff),
      total_trip_distance = sum(distance)
    ) %>%
    ungroup() %>%
    mutate(
      has_train_before = last_transport_mode == 'Train',
      has_train_after = next_transport_mode == 'Train',
      has_train_somewhere = transport_mode == "Train" | next_transport_mode == 'Train' | last_transport_mode == 'Train'
    )
  
  return(data)
}

# Function to visualize a user's trajectory
visualize_trajectory <- function(user_id, trip_id, data) {
  # Subset the data for the specified user and trip
  specific_data <- data %>%
    dplyr::filter(user_id == !!user_id, trip_id %in% c((!!trip_id - 1), !!trip_id, (!!trip_id + 1)))
  
  # If there's no data for this user and trip, return a message
  if (nrow(specific_data) == 0) {
    return("No data for this user and trip")
  }
  
  # Convert the data to a spatial object
  data_sf <- sf::st_as_sf(specific_data, coords = c("lon_x", "lat_y"), crs = 4326)
  
  # Set up the map
  tmap::tmap_mode("view")
  
  # Create the map
  map <- tmap::tm_shape(data_sf) +
    tmap::tm_dots(col = "transport_mode") +
    tmap::tm_basemap(server = "OpenStreetMap") +
    tmap::tm_layout(title = paste("User ID:", user_id, "Trip ID:", trip_id))
  
  return(map)
}

# Function to create a boxplot
create_boxplot <- function(data, value_column, remove_outliers = FALSE, add_title = FALSE, x_label_visible = TRUE, fixed_order = FALSE) {
  if (remove_outliers) {
    data <- data %>%
      group_by(transport_mode) %>%
      mutate(Q1 = quantile(get(value_column), 0.25, na.rm = TRUE),
             Q3 = quantile(get(value_column), 0.75, na.rm = TRUE),
             IQR = Q3 - Q1) %>%
      filter(#get(value_column) >= (Q1 - 1.5 * IQR),
             get(value_column) <= (Q3 + 1.5 * IQR))
  }
  
  
  
  
  if (fixed_order){
  # Define the fixed order for the transport_mode factor
  fixed_order <- c("Walk", "Bike", "Bus","Tram", "Car")
    data$transport_mode <- factor(data$transport_mode, levels = fixed_order)
  }else{
    data$transport_mode <- with(data, reorder(transport_mode, get(value_column), FUN = mean)) # Order by mean  
  }
  
  p<-ggplot(data, aes(x = transport_mode, y = !!sym(value_column), fill = transport_mode)) +
    geom_boxplot(outlier.shape = NA) +  # Don't plot outliers
    geom_jitter(width = 0.3, size = 1, alpha = 0.5) +
    stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "black", fill = "white") +
    scale_fill_brewer(palette = "Set3") +
    labs(y = value_column) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      axis.title.x = element_text(face = "bold", size = 12),
      axis.title.y = element_text(face = "bold", size = 12),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "none"
    )
  if (add_title) {
    p <- p + labs(title = paste("Boxplot of", value_column, "by Transport Mode"))
  }
  if (x_label_visible) {
    p <- p + labs(x = "Transport Mode")
  }else{
    p <- p + labs(x = "")
  }
  return(p)
}
  
# density plot
create_density_plot <- function(data, x_var = "distance", group_var = "transport_mode", title = "Density Plot") {
  library(ggplot2)
  ggplot(data, aes_string(x = x_var, fill = group_var)) +
    geom_density(alpha = 0.5) +
    labs(title = title, x = x_var, y = "Density") +
    theme_minimal()
}

combined_boxplot <- function(data, value_columns, remove_outliers = FALSE, title = "Combined Boxplots") {
  
  # Create an empty list to store individual plots
  plot_list <- list()
  x_label_visible = FALSE
  # Loop over value_columns to create individual boxplots
  for (i in 1:length(value_columns)) {
    if (i == length(value_columns)){
      x_label_visible = TRUE
    }
    p <- create_boxplot(data, value_columns[i], remove_outliers, FALSE, x_label_visible, TRUE)
    plot_list[[i]] <- p
  }
  
  # Combine the plots using cowplot
  combined_plot <- cowplot::plot_grid(plotlist = plot_list, ncol = 1)
  
  # Add a common title to the combined plot
  combined_plot <- cowplot::ggdraw(combined_plot) + 
    cowplot::draw_label(title, fontface = 'bold', size = 14, x = 0.5, y = 0.98)
  
  return(combined_plot)
}


```


# Data Preparation and cleaning
```{r}
# List all CSV files in the directory
file_list <- list.files(path = "data", pattern = "*.csv", full.names = TRUE)

# Read each CSV file into a data frame and concatenate them together
posmo <- do.call(rbind, lapply(file_list, function(x) read.csv(x, stringsAsFactors = FALSE)))

# Convert the datetime column to POSIXct type
posmo$datetime <- as.POSIXct(posmo$datetime, format = "%Y-%m-%dT%H:%M:%S", tz = "GMT")

# Convert user_id to a factor and then to numeric
posmo$user_id <- as.numeric(factor(posmo$user_id))

# Keep only the necessary columns and combine walk and run
posmo <- posmo |> 
  arrange(user_id, datetime) |>  
  select(user_id, datetime,transport_mode, lon_x, lat_y) |>
  mutate(transport_mode = ifelse(transport_mode == 'Run', 'Walk', transport_mode),
         transport_mode = ifelse(transport_mode == 'Funicular', 'Tram', transport_mode))

# Check for NA's and empty strings in the data
any(is.na(posmo))

# check which columns: 
apply(posmo, 2, function(x) any(is.na(x)))

#remove na data
posmo <- na.omit(posmo)

any(sapply(posmo |>select(user_id,transport_mode, lon_x, lat_y), function(x) any(x == "")))

# Create a data frame with non-empty transport_mode
posmo <- posmo|>filter(transport_mode != "")


```

```{r}
# Remove duplicated rows, split the data frame by user_id, apply the get_trips function to each group, and bind the results into a single data frame posmo_enriched.
posmo_enriched <- posmo|>distinct() |> group_by(user_id)|>group_split()|>map_dfr(get_trips)

# Apply the calculate_distances function to each user
data_by_user <- split(posmo_enriched, posmo_enriched$user_id)
posmo_enriched <- do.call(rbind, lapply(data_by_user, calculate_distances))

# Filter trips that involve a train
posmo_enriched_train <- posmo_enriched |> filter(has_train_somewhere == TRUE)


```


```{r}
posmo_analysis <- posmo_enriched_train %>%
  mutate(day = lubridate::date(datetime)) %>%
  group_by(trip_id, user_id, day, transport_mode, last_transport_mode, next_transport_mode) %>%
  summarise(
    distance = sum(distance),
    total_time = max(cumulative_time),
    direct_distance = distVincentySphere(c(lon_x[1], lat_y[1]), c(lon_x[n()], lat_y[n()]))
  ) %>%
  ungroup()
```

```{r}
# Get the shapefile for Switzerland
library(rnaturalearth)
library(rnaturalearthdata)
switzerland <- ne_countries(scale = "medium", country = "Switzerland", returnclass = "sf")

# Convert posmo_enriched_train to sf object and set CRS
posmo_sf <- st_as_sf(posmo_enriched_train, coords = c("lon_x", "lat_y"), crs = 4326)

# Transform the CRS of switzerland to match posmo_sf
switzerland <- st_transform(switzerland, crs = st_crs(posmo_sf))

# Spatial join to select trips within Switzerland
posmo_within_switzerland <- st_join(posmo_sf, switzerland, join = st_within)

# Filter out points outside of Switzerland
posmo_within_switzerland <- posmo_within_switzerland[!is.na(posmo_within_switzerland$iso_a2), ]

# Plot the trips within Switzerland
tmap_mode("plot")
tm_shape(posmo_within_switzerland) +
  tm_dots(col = "transport_mode") +
  tm_basemap(server = "OpenStreetMap") +
  tm_layout(title = "Trips within Switzerland")
```
```{r}
library(dplyr)
library(leaflet)

# Define longitude and latitude range of Zurich region
zurich_lon_range <- c(8.3, 8.6)
zurich_lat_range <- c(47.3, 47.5)

# Filter posmo_enriched_train to include only coordinates within Zurich region
posmo_enriched_train_zurich <- posmo_enriched_train %>%
  filter(lon_x >= zurich_lon_range[1] & lon_x <= zurich_lon_range[2] &
         lat_y >= zurich_lat_range[1] & lat_y <= zurich_lat_range[2])

# Create color factor palette for transport modes
pal <- colorFactor(c("navy", "red", "yellow", "orange", "green", "blue"), 
                   domain = c("Walk", "Bike", "Car", "Tram", "Train", "Bus"))

# Create popup content
content <- paste("Cluster: ", posmo_enriched_train_zurich$trip_id, "<br>",
                 "Transport mode: ", posmo_enriched_train_zurich$transport_mode)

# Create overview map
overview_map <- leaflet(posmo_enriched_train_zurich) %>% 
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.6)) %>%
  addRectangles(
      lng1=zurich_lon_range[1], lat1=zurich_lat_range[1],
      lng2=zurich_lon_range[2], lat2=zurich_lat_range[2],
      fillColor = "transparent", popup = "Zurich Region") %>%
  addCircleMarkers(color = ~pal(transport_mode), radius = 1, popup = content, 
                   lng = ~lon_x, lat = ~lat_y) %>%
  addLegend(pal = pal, values = ~transport_mode, position = "bottomright")

# Display map
overview_map
```












```{r}


posmo_train_related <- posmo_analysis |> 
  filter(next_transport_mode == 'Train' | last_transport_mode == 'Train') |> 
  filter(transport_mode!= 'Other1' & transport_mode!= 'Train')

posmo_train_related

create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = FALSE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "direct_distance", "total_time"), remove_outliers = FALSE)

```
#Time and speed analysis
To identify trajectories which are relevant for the analysis, we have to exclude all trips which take to long. For that we will do some assumptions and calculate a min tempo we expect. 

## Walk
```{r}
posmo_train_related <- posmo_train_related |> mutate(tripspeed = distance/total_time) |>
  arrange(tripspeed)

posmo_walk = posmo_train_related |> filter(transport_mode == 'Walk')
# Walk
boxplot(posmo_walk$distance/posmo_walk$total_time)

posmo_walk <- posmo_walk 

posmo_walk <- posmo_walk |> filter(tripspeed<160) |> filter(tripspeed > 2)|> filter(total_time<60) 

plot(posmo_walk$total_time)
boxplot(posmo_walk$total_time)

plot(posmo_walk$distance)
boxplot(posmo_walk$distance)

# Split the data
walk_data <- posmo_train_related |> filter(transport_mode == 'Walk')
other_data <- posmo_train_related |> filter(transport_mode != 'Walk')

# Apply filters to the walk data
walk_data <- walk_data |> 
  mutate(tripspeed = distance/total_time) |> 
  filter(tripspeed < 160 & tripspeed > 2 & total_time < 60)

# Combine the datasets
posmo_train_related <- bind_rows(walk_data, other_data)



```
```{r}
create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = FALSE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "direct_distance", "total_time", "tripspeed"), remove_outliers = FALSE)
```

## CAR
Relevant trajectories

```{r}
posmo_car = posmo_train_related |> filter(transport_mode == 'Car')

posmo_car <- posmo_car|>  filter(total_time<30) |> filter(distance < 10000)

#|> filter(tripspeed<160) |> filter(tripspeed > 2)|>

plot(posmo_car$total_time)
boxplot(posmo_car$total_time)

plot(posmo_car$tripspeed*60/1000)
boxplot(posmo_car$tripspeed)

plot(posmo_car$distance)
boxplot(posmo_car$distance)


# Split the data
car_data <- posmo_train_related |> filter(transport_mode == 'Car')
other_data <- posmo_train_related |> filter(transport_mode != 'Car')

# Apply filters to the walk data
car_data <- car_data |> 
  mutate(tripspeed = distance/total_time) |>  filter(total_time<30) |> filter(distance < 10000)

# Combine the datasets
posmo_train_related <- bind_rows(car_data, other_data)



```
```{r}
create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = TRUE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "total_time"), remove_outliers = TRUE)
```


## Bike
Relevant trajectories

```{r}
posmo_Bike = posmo_train_related |> filter(transport_mode == 'Bike')

posmo_Bike <- posmo_Bike|>  filter(total_time<60) |> filter(tripspeed > 3 * (1000/60))# |> filter(distance < 10000)

#|> filter(tripspeed<160) |> filter(tripspeed > 2)|>

plot(posmo_Bike$total_time)
boxplot(posmo_Bike$total_time)

plot(posmo_Bike$tripspeed*60/1000)
boxplot(posmo_Bike$tripspeed*60/1000)

plot(posmo_Bike$distance)
boxplot(posmo_Bike$distance)


# Split the data
bike_data <- posmo_train_related |> filter(transport_mode == 'Bike')
other_data <- posmo_train_related |> filter(transport_mode != 'Bike')

# Apply filters to the walk data
bike_data <- bike_data |> 
     filter(total_time<60) |> filter(tripspeed > 3 * (1000/60))

# Combine the datasets
posmo_train_related <- bind_rows(bike_data, other_data)



```

```{r}
create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = FALSE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "total_time"), remove_outliers = FALSE)
```


## Bus
Relevant trajectories

```{r}
posmo_Bus = posmo_train_related |> filter(transport_mode == 'Bus')

posmo_Bus <- posmo_Bus |>  filter(total_time<60) #|> filter(tripspeed > 3 * (1000/60))# |> filter(distance < 10000)

#|> filter(tripspeed<160) |> filter(tripspeed > 2)|>

plot(posmo_Bus$total_time)
boxplot(posmo_Bus$total_time)

plot(posmo_Bus$tripspeed*60/1000)
boxplot(posmo_Bus$tripspeed*60/1000)

plot(posmo_Bus$distance)
boxplot(posmo_Bus$distance)


# Split the data
bus_data <- posmo_train_related |> filter(transport_mode == 'Bus')
other_data <- posmo_train_related |> filter(transport_mode != 'Bus')

# Apply filters to the walk data
bus_data <- bus_data |> 
     filter(total_time<60)

# Combine the datasets
posmo_train_related <- bind_rows(bus_data, other_data)



```

```{r}
create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = FALSE)
create_boxplot(data = posmo_train_related, value_column = "total_time", remove_outliers = FALSE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "total_time"), remove_outliers = FALSE)
```


## Tram
Relevant trajectories

```{r}
posmo_tram = posmo_train_related |> filter(transport_mode == 'Tram')

posmo_tram <- posmo_tram |>  filter(total_time<60) #|> filter(tripspeed > 3 * (1000/60))# |> filter(distance < 10000)

#|> filter(tripspeed<160) |> filter(tripspeed > 2)|>

plot(posmo_tram$total_time)
boxplot(posmo_tram$total_time)

plot(posmo_tram$tripspeed*60/1000)
boxplot(posmo_tram$tripspeed*60/1000)

plot(posmo_tram$distance)
boxplot(posmo_tram$distance)


# Split the data
tram_data <- posmo_train_related |> filter(transport_mode == 'Tram')
other_data <- posmo_train_related |> filter(transport_mode != 'Tram')

# Apply filters to the walk data
tram_data <- tram_data |> 
      filter(total_time<60)

# Combine the datasets
posmo_train_related <- bind_rows(tram_data, other_data)



```

```{r}
create_boxplot(data = posmo_train_related, value_column = "distance", remove_outliers = FALSE)
create_boxplot(data = posmo_train_related, value_column = "total_time", remove_outliers = FALSE)
combined_boxplot(data = posmo_train_related, value_columns = c("distance", "total_time"), remove_outliers = FALSE)
```

```{r}
# Convert transport_mode to a factor
posmo_train_related$transport_mode <- as.factor(posmo_train_related$transport_mode)

# Perform ANOVA
model <- aov(distance ~ transport_mode, data = posmo_train_related)
summary(model)

# The output of the Analysis of Variance (ANOVA) test indicates that there are statistically significant differences in the average distances traveled among the different modes of transport.
# 
# The term 'significant' in this context means that the observed differences in the means are unlikely to have occurred by chance. The p-value, which is less than 0.0000000000000002, supports this finding. A p-value is a measure of the probability that an observed difference could have occurred just by random chance. The smaller the p-value, the greater the statistical evidence you have to reject the null hypothesis (which in this case is that there is no difference in means across the groups). A commonly used threshold to denote statistical significance is 0.05, and any p-value less than this is generally described as statistically significant.
# 
# The F-value of 47.97 is quite large, indicating a strong relationship between the mode of transport and the distance traveled. This F-value is a ratio of the variance between the groups (variance in distances across different transport modes) to the variance within the groups (variance in distances within the same mode of transport). A larger F-value suggests that the variance between groups is significantly greater than the variance within groups, further strengthening the conclusion that the mode of transport has a significant impact on the distance traveled.
# 
# In summary, the output of the ANOVA test strongly suggests that the mode of transport used has a significant effect on the distance traveled. That is, the average distance traveled varies significantly depending on whether the mode of transport is a bike, bus, car, tram, etc. Further analysis (such as a post-hoc test) could be conducted to determine which specific modes of transport are significantly different from each other in terms of the distance traveled.
# 


# Perform the Tukey HSD test
posthoc <- TukeyHSD(model)

# Print the results
print(posthoc)
```


```{r}
# Ensure the nnet package is installed
if (!require(nnet)) {
  install.packages("nnet")
}

# Load the package
library(nnet)

# Build the multinomial logistic regression model
model <- multinom(transport_mode ~ distance + total_time, data = posmo_train_related)

# Show the summary of the model
summary(model)

```
```{r}
# Install and load the package
install.packages("rpart")
library(rpart)

# Fit the model
model <- rpart(transport_mode ~ distance + total_time, data = posmo_train_related)

# Print the model
print(model)

# Plot the tree
plot(model)
text(model)

```


n=202: This means that the total number of data points (or rows) that the model was trained on is 202.

node): Each node in the tree is represented by a number. The root node (the very first split) is node 1.

split: This shows the condition that was used to split the data at each node. For example, distance < 970.5924 means that the data was split into two groups: one where distance is less than 970.5924, and one where distance is greater than or equal to 970.5924.

n: This shows the number of data points at each node.

loss: This represents the misclassification error for each node. It's the number of misclassified instances.

yval: This is the predicted class (mode of transport) for each node.

yprob: These are the probabilities of each class (mode of transport) at each node. The order of the classes is the same as in the yval column.

* denotes terminal node: Terminal nodes, also known as leaf nodes, are the final nodes where the data points are classified. They are marked with a *.

The tree starts with the root node (node 1). Here, the model checks whether distance is less than 970.5924. If it is, the data point goes to node 2, otherwise it goes to node 3. This process continues until it reaches a terminal node, which provides the final prediction.

For example, if a data point has distance less than 970.5924, it is classified as 'Walk'. If distance is greater than or equal to 970.5924 but total_time is less than 9.15 and distance is greater than or equal to 2135.939, it is classified as 'Car'.

This tree structure enables you to trace through the paths and understand how the model is making decisions based on the distance and total_time features.



```{r}
# Install and load the package
install.packages("randomForest")
library(randomForest)

# Fit the model
model <- randomForest(transport_mode ~ distance + total_time, data = posmo_train_related)

# Print the model
print(model)

# Importance of each predictor
importance(model)

```

This output is from a random forest model. Here's how to interpret it:

Type of random forest: classification: This indicates that the random forest was used for a classification problem, which is consistent with the goal of predicting the mode of transport.

Number of trees: 500: This is the number of trees that were built in the random forest. In a random forest, many decision trees are built and their results are aggregated to make a final prediction. The number of trees is a hyperparameter that can be tuned to optimize model performance.

No. of variables tried at each split: 1: At each split in each decision tree, the model considers 1 variable to determine the best split. This is another hyperparameter of the model.

OOB estimate of error rate: 37.13%: This is the out-of-bag (OOB) error rate, which is a method of measuring the prediction error of random forests. The OOB error is the average error for each observation calculated using predictions from the trees that did not have that observation in their bootstrap sample. In this case, the model misclassified about 37.13% of the observations.

Confusion matrix: This matrix provides a breakdown of the model's performance for each class. The rows represent the true class and the columns represent the predicted class. For example, the model correctly predicted 'Walk' 81 times, but misclassified 1 'Walk' as 'Bike', 1 'Walk' as 'Bus', 2 'Walk' as 'Tram', and 3 'Walk' as 'Car'. The class.error column shows the misclassification rate for each class.

MeanDecreaseGini: The Gini index is a measure of the total variance across the classes. It is used in the CART algorithm for building decision trees. The MeanDecreaseGini column shows the total decrease in the Gini index that results from splits over a given predictor, averaged over all trees. A larger value indicates a more important predictor. In this case, distance had a larger effect on the model predictions than total_time.

```{r}
# Install and load the package
install.packages("xgboost")
library(xgboost)

# Prepare the data
data <- data.matrix(posmo_train_related[, c("distance", "total_time")])
label <- posmo_train_related$transport_mode

# Fit the model
model <- xgboost(data = data, label = label, nrounds = 10, objective = "multi:softmax", num_class = length(unique(label)))

# Print the model
print(model)

```


```{r}
# Install and load the package
install.packages("nnet")
library(nnet)
# Convert 'transport_mode' to a factor
posmo_train_related$transport_mode <- as.factor(posmo_train_related$transport_mode)


# Fit the model
model <- nnet(transport_mode ~ distance + total_time, data = posmo_train_related, size = 10, rang = 0.1, decay = 5e-4, maxit = 200)

# Print the model
print(model)


# Predict on new data
new_data <- data.frame(distance = c(1000, 2000, 3000),
                       total_time = c(10, 20, 30))
predictions <- predict(model, newdata = new_data, type = "class")

# Print the predictions
print(predictions)


```

```{r}

```




















